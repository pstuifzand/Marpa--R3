===
In: @ary = (1, 3, sort 4, 2);
Found:
1, 3
4, 2
===
In: print @ary;         # prints 1324
Found:
1324
===
In: # These evaluate exit before doing the print:
Found:
===
In: print($foo, exit);  # Obviously not what you want.
Found:
$foo
===
In: print $foo, exit;   # Nor is this.
Found:
$foo
===
In: # These do the print before evaluating exit:
Found:
===
In: (print $foo), exit; # This is what you want.
Found:
$foo
===
In: print($foo), exit;  # Or this.
Found:
($foo)
===
In: print ($foo), exit; # Or even this.
Found:
($foo)
===
In: print ($foo & 255) + 1, "n";
Found:
($foo & 255) + 1
===
In: 1 + 1, "n";    # Obviously not what you meant.
Found:
1 + 1
===
In: print(($foo & 255) + 1, "n");
Found:
($foo & 255) + 1
===
In: $i = 0;  $j = 0;
Found:
$i = 0
$j = 0
===
In: print $i++;  # prints 0
Found:
$i++
0
===
In: print ++$j;  # prints 1
Found:
++$j
1
===
In: $i = $i ++;
Found:
$i = $i ++
===
In: print ++ $i + $i ++;
Found:
++ $i + $i ++
===
In: print ++($foo = '99');      # prints '100'
Found:
$foo
99
100
===
In: print ++($foo = 'a0');      # prints 'a1'
Found:
$foo
0
1
===
In: print ++($foo = 'Az');      # prints 'Ba'
Found:
$foo
===
In: print ++($foo = 'zz');      # prints 'aaa'
Found:
$foo
===
In: '\' =~ q'\';
Found:
===
In: print '-' x 80;             # print row of dashes
Found:
80
===
In: print "t" x ($tab/8), ' ' x ($tab%8);      # tab over
Found:
($tab/8)
($tab%8)
===
In: @ones = (1) x 80;           # a list of 80 1's
Found:
(1) x 80
80
1
===
In: @ones = (5) x @ones;        # set all elements to 5
Found:
(5)
5
===
In: chdir $foo    || die;       # (chdir $foo) || die
Found:
$foo
$foo
===
In: chdir($foo)   || die;       # (chdir $foo) || die
Found:
($foo)
$foo
===
In: chdir ($foo)  || die;       # (chdir $foo) || die
Found:
($foo)
$foo
===
In: chdir +($foo) || die;       # (chdir $foo) || die
Found:
+($foo)
$foo
===
In: chdir $foo * 20;    # chdir ($foo * 20)
Found:
$foo * 20
($foo * 20)
===
In: chdir($foo) * 20;   # (chdir $foo) * 20
Found:
($foo) * 20
$foo
20
===
In: chdir ($foo) * 20;  # (chdir $foo) * 20
Found:
($foo) * 20
$foo
20
===
In: chdir +($foo) * 20; # chdir ($foo * 20)
Found:
+($foo) * 20
($foo * 20)
===
In: rand 10 * 20;       # rand (10 * 20)
Found:
10 * 20
(10 * 20)
===
In: rand(10) * 20;      # (rand 10) * 20
Found:
(10) * 20
10
20
===
In: rand (10) * 20;     # (rand 10) * 20
Found:
(10) * 20
10
20
===
In: rand +(10) * 20;    # rand (10 * 20)
Found:
+(10) * 20
(10 * 20)
===
In: perl -le '$a = "NaN"; print "No NaN support here" if $a == $a'
Found:
$a
$a
$a
===
In: perl -le '$a = "NaN"; print "NaN support here" if $a != $a'
Found:
$a
$a
$a
===
In: print "Evenn" if ($x & 1) == 0;
Found:
($x & 1)
0
===
In: print "falsen" if (8 | 2) != 10;
Found:
(8 | 2)
10
===
In: @a = @b || @c;              # this is wrong
Found:
===
In: @a = scalar(@b) || @c;      # really meant this
Found:
===
In: @a = @b ? @b : @c;          # this works fine, though
Found:
===
In: $a = $ok ? @b : @c;  # oops, that's just a count!
Found:
$a = $ok
===
In: ($a_or_b ? $a : $b) = $c;
Found:
$a_or_b
$a
$b
$c
===
In: $a % 2 ? $a += 10 : $a += 2
Found:
$a % 2
$a
10
$a
2
===
In: (($a % 2) ? ($a += 10) : $a) += 2
Found:
($a % 2)
$a
10
$a
2
===
In: ($a % 2) ? ($a += 10) : ($a += 2)
Found:
($a % 2)
$a
10
$a
2
===
In: $a += ($a % 2) ? 10 : 2;
Found:
$a
($a % 2)
10
2
===
In: $a += 2;
Found:
$a
2
===
In: $a = $a + 2;
Found:
$a = $a + 2
===
In: ($tmp = $global) =~ tr [A-Z] [a-z];
Found:
($tmp = $global)
===
In: ($a += 2) *= 3;
Found:
$a
2
3
===
In: $a += 2;
Found:
$a
2
===
In: $a *= 3;
Found:
$a
3
===
In: use constant FOO => "something";
Found:
===
In: my %h = ( FOO => 23 );
Found:
23
===
In: my %h = ("FOO", 23);
Found:
23
===
In: my %h = ("something", 23);
Found:
23
===
In: %hash = ( $key => $value );
Found:
$key
$value
===
In: login( $username => $password );
Found:
$username
$password
===
In: open HANDLE, "filename"
Found:
===
In: or die "Can't open: $!n";
Found:
===
In: print FH $data              or die "Can't write to FH: $!";
Found:
$data
===
In: $a = $b or $c;              # bug: this is wrong
Found:
$a = $b
$c
===
In: ($a = $b) or $c;            # really means this
Found:
($a = $b)
$c
===
In: $a = $b || $c;              # better written this way
Found:
$a = $b
$c
===
In: $foo =  150  |  105;        # yields 255  (0x96 | 0x69 is 0xFF)
Found:
$foo = 150 | 105
255
0
96 | 0
69
0
===
In: $foo = '150' |  105;        # yields 255
Found:
$foo
150
105
255
===
In: $foo =  150  | '105';       # yields 255
Found:
$foo = 150
105
255
===
In: $foo = '150' | '105';       # yields string '155' (under ASCII)
Found:
$foo
150
105
155
===
In: $baz = 0+$foo & 0+$bar;     # both ops explicitly numeric
Found:
$baz = 0+$foo & 0+$bar
===
In: $biz = "$foo" ^ "$bar";     # both ops explicitly stringy
Found:
$biz
$foo
$bar
===
In: use integer;
Found:
===
In: no integer;
Found:
===
In: printf "%.20gn", 123456789123456789;
Found:
.20
123456789123456789
===
In: #        produces 123456789123456784
Found:
123456789123456784
===
In: $x = Math::BigInt->new('123456789123456789');
Found:
$x
123456789123456789
===
In: print $x * $x;
Found:
$x * $x
===
In: # prints +15241578780673678515622620750190521
Found:
+15241578780673678515622620750190521
